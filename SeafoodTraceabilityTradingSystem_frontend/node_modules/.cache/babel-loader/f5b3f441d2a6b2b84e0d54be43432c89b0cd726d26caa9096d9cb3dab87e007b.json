{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\";\nimport _imports_0 from '../images/Wechatlogin.png';\nconst _hoisted_1 = {\n  class: \"qr-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"qr-wrapper\"\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  class: \"status-text\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"new-status-wrapper\"\n};\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = {\n  class: \"new-status-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 根据状态显示二维码或新的图片 \"), $setup.showQRCode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"img\", {\n    src: $setup.qrCodeUrl,\n    alt: \"二维码\",\n    class: \"qr-image\"\n  }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.statusMessage), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [!$setup.firstTime ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createCommentVNode(\" 新的图片或提示，替换二维码 \"), _cache[0] || (_cache[0] = _createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"微信登录\",\n    class: \"new-status-image\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.statusMessage), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])), _createVNode(_component_el_button, {\n    onClick: $setup.generateQRCode,\n    class: \"login-button\",\n    type: \"primary\",\n    block: \"\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"生成二维码\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])])), [[_directive_loading, $setup.isLoading]]);\n}","map":{"version":3,"names":["_imports_0","class","key","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","showQRCode","_hoisted_2","_createElementVNode","src","qrCodeUrl","alt","_hoisted_3","_hoisted_4","_toDisplayString","statusMessage","_hoisted_5","firstTime","_hoisted_6","_hoisted_7","_createVNode","_component_el_button","onClick","generateQRCode","type","block","default","_withCtx","_cache","_createTextVNode","_","isLoading"],"sources":["D:\\Cache\\Java\\shopping\\shoppping_c_frontend\\src\\components\\WechatLoginComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"qr-container\" v-loading=\"isLoading\">\r\n    <!-- 根据状态显示二维码或新的图片 -->\r\n    <div v-if=\"showQRCode\" class=\"qr-wrapper\">\r\n      <img :src=\"qrCodeUrl\" alt=\"二维码\" class=\"qr-image\"/>\r\n      <div class=\"status-text\">{{ statusMessage }}</div>\r\n    </div>\r\n    <div v-else class=\"new-status-wrapper\">\r\n      <div v-if=\"!firstTime\">\r\n        <!-- 新的图片或提示，替换二维码 -->\r\n        <img src=\"../images/Wechatlogin.png\" alt=\"微信登录\" class=\"new-status-image\"/>\r\n        <div class=\"new-status-text\">{{ statusMessage }}</div>\r\n      </div>\r\n    </div>\r\n    <el-button @click=\"generateQRCode\" class=\"login-button\" type=\"primary\" block>生成二维码</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {ElMessage} from 'element-plus';\r\nimport axios from 'axios';\r\nimport {ref} from 'vue';\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n  setup() {\r\n    const qrCodeUrl = ref(null); // 初始二维码 URL\r\n    const statusMessage = ref('请扫描二维码'); // 初始提示文字\r\n    const showQRCode = ref(false); // 控制显示二维码或新元素\r\n    const firstTime = ref(true); // 第一次加载页面\r\n    const isLoading = ref(false); // 控制加载动画\r\n\r\n    // 生成二维码\r\n    const generateQRCode = async () => {\r\n      ElMessage.info('正在生成二维码，请稍候');\r\n      isLoading.value = true; // 启动加载动画\r\n\r\n      try {\r\n        const response = await axios.post('/api/wx/startQRCode');\r\n        if (response.data.qrCodeUrl) {\r\n          ElMessage.success('二维码生成成功');\r\n          qrCodeUrl.value = response.data.qrCodeUrl;\r\n          statusMessage.value = '请扫描二维码';\r\n          showQRCode.value = true; // 显示二维码\r\n          firstTime.value = false; // 不是第一次加载页面\r\n          setTimeout(pollQRCodeStatus, 2000); // 开始轮询，等待2秒避免立即请求\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('生成二维码失败，请稍后重试');\r\n        console.error(error);\r\n      } finally {\r\n        isLoading.value = false; // 停止加载动画\r\n      }\r\n    };\r\n\r\n    // 轮询二维码状态\r\n    const pollQRCodeStatus = async () => {\r\n      try {\r\n        const response = await axios.post('/api/wx/pollQRCodeStatus');\r\n        if (response.data.status.includes('登录成功')) {\r\n          statusMessage.value = \"登录成功，欢迎回来！\";\r\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\r\n          const openidMatch = response.data.status.match(/openid：(.+)/);\r\n          let openid = null;\r\n          if (openidMatch && openidMatch[1]) {\r\n            openid = openidMatch[1].trim();\r\n          }\r\n          setTimeout(() => {\r\n            router.replace(\"/accessResult?id=\" + openid + \"&source=wechat\");\r\n          }, 1500);\r\n        } else if (response.data.status.includes('扫码成功')) {\r\n          statusMessage.value = \"扫码成功，请绑定账号\";\r\n          showQRCode.value = false;\r\n          setTimeout(() => {\r\n            const tokenMatch = response.data.status.match(/token：([^，]+)/);\r\n            if (tokenMatch && tokenMatch[1]) {\r\n              const token = tokenMatch[1];\r\n              router.replace(\"/accessLogin?token=\" + token)\r\n            }\r\n          }, 1500);\r\n          // 等待 2 秒，避免立即请求\r\n        } else if (response.data.status.includes('二维码已过期')) {\r\n          statusMessage.value = '二维码已过期，请重新生成';\r\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\r\n        } else if (response.data.status.includes('用户取消扫码')) {\r\n          statusMessage.value = '用户取消扫码，请重新生成';\r\n          showQRCode.value = false;\r\n        } else {\r\n          statusMessage.value = response.data.status;\r\n          setTimeout(pollQRCodeStatus, 2000); // 每隔 2 秒轮询一次\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('轮询二维码状态失败');\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    return {\r\n      qrCodeUrl,\r\n      statusMessage,\r\n      generateQRCode,\r\n      showQRCode,\r\n      firstTime,\r\n      isLoading,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.qr-container {\r\n  display: flex;\r\n  flex-direction: column; /* 垂直排列 */\r\n  align-items: center; /* 居中对齐 */\r\n  margin-top: 20px;\r\n}\r\n\r\n.qr-wrapper, .new-status-wrapper {\r\n  display: inline-block;\r\n  position: relative;\r\n}\r\n\r\n.qr-image, .new-status-image {\r\n  width: 200px;\r\n  height: 200px;\r\n}\r\n\r\n.status-text, .new-status-text {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: white;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.login-button {\r\n  background-color: #668B8B;\r\n  border: none;\r\n  font-size: 18px;\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"mappings":";OAUaA,UAA+B;;EATrCC,KAAK,EAAC;AAAc;;EAD3BC,GAAA;EAG2BD,KAAK,EAAC;;mBAHjC;;EAKWA,KAAK,EAAC;AAAa;;EAL9BC,GAAA;EAOgBD,KAAK,EAAC;;;EAPtBC,GAAA;AAAA;;EAWaD,KAAK,EAAC;AAAiB;;;;wCAVlCE,mBAAA,CAcM,OAdNC,UAcM,GAbJC,mBAAA,oBAAuB,EACZC,MAAA,CAAAC,UAAU,I,cAArBJ,mBAAA,CAGM,OAHNK,UAGM,GAFJC,mBAAA,CAAkD;IAA5CC,GAAG,EAAEJ,MAAA,CAAAK,SAAS;IAAEC,GAAG,EAAC,KAAK;IAACX,KAAK,EAAC;0BAJ5CY,UAAA,GAKMJ,mBAAA,CAAkD,OAAlDK,UAAkD,EAAAC,gBAAA,CAAtBT,MAAA,CAAAU,aAAa,iB,oBAE3Cb,mBAAA,CAMM,OANNc,UAMM,G,CALQX,MAAA,CAAAY,SAAS,I,cAArBf,mBAAA,CAIM,OAZZgB,UAAA,GASQd,mBAAA,mBAAsB,E,0BACtBI,mBAAA,CAA0E;IAArEC,GAA+B,EAA/BV,UAA+B;IAACY,GAAG,EAAC,MAAM;IAACX,KAAK,EAAC;+BACtDQ,mBAAA,CAAsD,OAAtDW,UAAsD,EAAAL,gBAAA,CAAtBT,MAAA,CAAAU,aAAa,iB,KAXrDX,mBAAA,e,IAcIgB,YAAA,CAA8FC,oBAAA;IAAlFC,OAAK,EAAEjB,MAAA,CAAAkB,cAAc;IAAEvB,KAAK,EAAC,cAAc;IAACwB,IAAI,EAAC,SAAS;IAACC,KAAK,EAAL;;IAd3EC,OAAA,EAAAC,QAAA,CAciF,MAAKC,MAAA,QAAAA,MAAA,OAdtFC,gBAAA,CAciF,OAAK,E;IAdtFC,CAAA;2DACuCzB,MAAA,CAAA0B,SAAS,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}