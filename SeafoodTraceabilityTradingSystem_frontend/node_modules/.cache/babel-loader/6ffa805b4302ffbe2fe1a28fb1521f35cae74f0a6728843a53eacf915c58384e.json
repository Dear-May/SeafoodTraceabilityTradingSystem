{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"  <div id=\\\"box\\\">\"), _createCommentVNode(\"    &lt;!&ndash; 设置自动播放，否则不会显示视频流画面 &ndash;&gt;\"), _createCommentVNode(\"    <video id=\\\"video\\\" ref=\\\"video\\\" autoplay></video>\"), _createCommentVNode(\"    <canvas style=\\\"display: contents;\\\"></canvas>\"), _createCommentVNode(\"    <div id=\\\"btn\\\">\"), _createCommentVNode(\"      <button ref=\\\"button_one\\\" @click=\\\"publish\\\">开始直播</button>\"), _createCommentVNode(\"      <button ref=\\\"button_two\\\" @click=\\\"close\\\">停止直播</button>\"), _createCommentVNode(\"      <button ref=\\\"button_three\\\" @click=\\\"stopAudio\\\">关闭声音</button>\"), _createCommentVNode(\"      <button ref=\\\"button_four\\\" @click=\\\"startAudio\\\">开启声音</button>\"), _createCommentVNode(\"      <button ref=\\\"button_five\\\" @click=\\\"play\\\">播放直播</button>\"), _createCommentVNode(\"    </div>\"), _createCommentVNode(\"    <video id=\\\"video2\\\" ref=\\\"video2\\\" autoplay></video>\"), _createCommentVNode(\"  </div>\"), _createElementVNode(\"div\", null, [_createVNode(_component_el_button, null, {\n    default: _withCtx(() => _cache[0] || (_cache[0] = [_createTextVNode(\"测试\")])),\n    _: 1 /* STABLE */\n  })])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","_createVNode","_component_el_button","default","_withCtx","_cache","_createTextVNode","_"],"sources":["D:\\Cache\\Java\\shopping\\shoppping_c_frontend\\src\\views\\TestView.vue"],"sourcesContent":["<template>\r\n  <!--  <div id=\"box\">-->\r\n  <!--    &lt;!&ndash; 设置自动播放，否则不会显示视频流画面 &ndash;&gt;-->\r\n  <!--    <video id=\"video\" ref=\"video\" autoplay></video>-->\r\n  <!--    <canvas style=\"display: contents;\"></canvas>-->\r\n  <!--    <div id=\"btn\">-->\r\n  <!--      <button ref=\"button_one\" @click=\"publish\">开始直播</button>-->\r\n  <!--      <button ref=\"button_two\" @click=\"close\">停止直播</button>-->\r\n  <!--      <button ref=\"button_three\" @click=\"stopAudio\">关闭声音</button>-->\r\n  <!--      <button ref=\"button_four\" @click=\"startAudio\">开启声音</button>-->\r\n  <!--      <button ref=\"button_five\" @click=\"play\">播放直播</button>-->\r\n  <!--    </div>-->\r\n  <!--    <video id=\"video2\" ref=\"video2\" autoplay></video>-->\r\n  <!--  </div>-->\r\n  <div>\r\n    <el-button>测试</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref, onMounted} from 'vue';\r\n\r\nconst videoStream = ref(null);\r\nconst videoElement = ref(null);\r\nconst pc = ref(null);\r\nconst audioTrack = ref(null);\r\nconst audioSender = ref(null);\r\nconst button_one = ref(null);\r\nconst button_two = ref(null);\r\nconst button_three = ref(null);\r\nconst button_four = ref(null);\r\nconst button_five = ref(null);\r\n\r\nonMounted(() => {\r\n  button_one.disabled = false;\r\n  button_two.disabled = true;\r\n  button_three.disabled = true;\r\n  button_four.disabled = true;\r\n  button_five.disabled = true;\r\n});\r\n\r\nasync function publish() {\r\n  if (pc.value !== null && pc.value !== undefined) {\r\n    console.log(\"已开始推流\");\r\n    return;\r\n  }\r\n  const httpURL = \"http://localhost:1985/rtc/v1/publish/\";\r\n  const webRTCURL = \"webRTC://localhost/live/10\";\r\n  const constraints = {\r\n    audio: {\r\n      echoCancellation: true,    // 回声消除\r\n      noiseSuppression: true,    // 降噪\r\n      autoGainControl: true     // 自动增益\r\n    },\r\n    video: {\r\n      frameRate: {min: 30},                // 最小帧率\r\n      width: {min: 640, ideal: 1080}, // 宽度\r\n      height: {min: 360, ideal: 720},  // 高度\r\n      aspectRadio: 16 / 9                        // 宽高比\r\n    }\r\n  };\r\n\r\n  videoStream.value = await navigator.mediaDevices.getUserMedia(constraints);\r\n  videoElement.value = document.querySelector(\"#video\");\r\n  videoElement.value.srcObject = videoStream.value;\r\n  videoElement.value.volume = 0;\r\n  pc.value = new RTCPeerConnection();\r\n\r\n  pc.value.addTransceiver(\"audio\", {direction: \"recvonly\"});\r\n  pc.value.addTransceiver(\"video\", {direction: \"recvonly\"});\r\n  videoStream.value.getTracks().forEach((track) => {\r\n    pc.value.addTrack(track);\r\n  });\r\n\r\n  const offer = await pc.value.createOffer();\r\n  await pc.value.setLocalDescription(offer);\r\n  const data = {\r\n    \"api\": httpURL,\r\n    \"streamurl\": webRTCURL,\r\n    \"sdp\": offer.sdp\r\n  };\r\n\r\n  httpApi(httpURL, data).then(async (data) => {\r\n    console.log(\"answer\", data);\r\n    await pc.value.setRemoteDescription(new RTCSessionDescription({type: 'answer', sdp: data.sdp}));\r\n    button_one.disabled = true;\r\n    button_two.disabled = false;\r\n    button_three.disabled = false;\r\n    button_five.disabled = false;\r\n  }).catch((data) => {\r\n    if (data.code === 400) {\r\n      console.log(\"SDP交换失败\");\r\n    }\r\n  });\r\n}\r\n\r\nasync function play() {\r\n  const httpURL = \"http://localhost:1985/rtc/v1/play/\";\r\n  const webRTCURL = \"webRTC://localhost/live/888\";\r\n  const localPc = new RTCPeerConnection();\r\n  const stream = new MediaStream();\r\n  const videoElement2 = document.querySelector(\"#video2\");\r\n\r\n  localPc.ontrack = (event) => {\r\n    stream.addTrack(event.track);\r\n    console.log(event.track);\r\n    videoElement2.srcObject = stream;\r\n  };\r\n\r\n  localPc.addTransceiver(\"audio\", {direction: \"recvonly\"});\r\n  localPc.addTransceiver(\"video\", {direction: \"recvonly\"});\r\n\r\n  const offer = await localPc.createOffer();\r\n  await localPc.setLocalDescription(offer);\r\n  const data = {\r\n    \"api\": httpURL,\r\n    \"streamurl\": webRTCURL,\r\n    \"sdp\": offer.sdp\r\n  };\r\n\r\n  httpApi(httpURL, data).then(async (data) => {\r\n    console.log(\"answer\", data);\r\n    await localPc.setRemoteDescription(new RTCSessionDescription({type: 'answer', sdp: data.sdp}));\r\n    button_five.disabled = true;\r\n  }).catch((data) => {\r\n    if (data.code === 400) {\r\n      console.log(\"SDP交换失败\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction close() {\r\n  if (pc.value !== null && pc.value !== undefined) {\r\n    pc.value.close();\r\n    pc.value = null;\r\n    button_one.disabled = false;\r\n    button_two.disabled = true;\r\n    button_three.disabled = true;\r\n    button_four.disabled = true;\r\n    button_five.disabled = true;\r\n  }\r\n}\r\n\r\nfunction stopAudio() {\r\n  if (pc.value !== null && pc.value !== undefined) {\r\n    pc.value.getSenders().forEach((sender) => {\r\n      if (sender.track !== null && sender.track.kind === \"audio\") {\r\n        audioTrack.value = sender.track;\r\n        audioSender.value = sender;\r\n        audioSender.value.replaceTrack(null);\r\n        button_three.disabled = true;\r\n        button_four.disabled = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction startAudio() {\r\n  if (pc.value !== null && pc.value !== undefined) {\r\n    if (audioSender.value.track === null) {\r\n      audioSender.value.replaceTrack(audioTrack.value);\r\n      button_three.disabled = false;\r\n      button_four.disabled = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction httpApi(httpURL, data) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('POST', httpURL, true);\r\n    xhr.setRequestHeader('Content-type', 'application/json');\r\n    xhr.send(JSON.stringify(data));\r\n    xhr.onload = () => {\r\n      if (xhr.readyState !== xhr.DONE) reject(xhr);\r\n      if (xhr.status !== 200 && xhr.status !== 201) reject(xhr);\r\n      const responseData = JSON.parse(xhr.responseText);\r\n      if (responseData.code === 0) {\r\n        resolve(responseData);\r\n      } else {\r\n        reject(responseData);\r\n      }\r\n    };\r\n  });\r\n}\r\n</script>\r\n\r\n<style>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n#box {\r\n  width: 100%;\r\n  text-align: center;\r\n}\r\n\r\nvideo {\r\n  background-color: black;\r\n  width: 500px;\r\n  height: 400px;\r\n  object-fit: cover;\r\n}\r\n\r\n#btn {\r\n  width: 80%;\r\n  height: 100px;\r\n  display: flex;\r\n  margin: 10px 10%;\r\n}\r\n\r\nbutton {\r\n  flex: 1;\r\n  height: 100px;\r\n  background-color: aqua;\r\n  border-radius: 20px;\r\n  margin-left: 10px;\r\n}\r\n\r\nbutton:nth-child(1) {\r\n  margin-left: 0;\r\n}\r\n</style>\r\n推流/拉流示例代码"],"mappings":";;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,mBAAA,sBAAuB,EACvBA,mBAAA,mDAAsD,EACtDA,mBAAA,2DAA0D,EAC1DA,mBAAA,sDAAuD,EACvDA,mBAAA,wBAAyB,EACzBA,mBAAA,qEAAoE,EACpEA,mBAAA,mEAAkE,EAClEA,mBAAA,yEAAwE,EACxEA,mBAAA,yEAAwE,EACxEA,mBAAA,mEAAkE,EAClEA,mBAAA,cAAiB,EACjBA,mBAAA,6DAA4D,EAC5DA,mBAAA,YAAe,EACfC,mBAAA,CAEM,cADJC,YAAA,CAAyBC,oBAAA;IAf7BC,OAAA,EAAAC,QAAA,CAee,MAAEC,MAAA,QAAAA,MAAA,OAfjBC,gBAAA,CAee,IAAE,E;IAfjBC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}