{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport HeaderComponent from \"@/components/HeaderComponent.vue\";\nimport RightWidgetComponent from \"@/components/RightWidgetComponent.vue\";\nimport FooterComponent from \"@/components/FooterComponent.vue\";\nimport useUser from \"@/composables/useUser\";\nimport { onMounted, ref } from \"vue\";\nimport router from \"@/router\";\nimport { ElMessage } from \"element-plus\";\nimport axios from \"axios\";\nexport default {\n  __name: 'LiveView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const {\n      UserInfoForm,\n      initUserSession\n    } = useUser();\n    const LiveId = ref();\n    const loading = ref(false);\n    function getLiveId() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const liveId = urlParams.get(\"id\");\n      if (liveId) {\n        LiveId.value = liveId;\n      } else {\n        ElMessage.error(\"直播间不存在\");\n        router.push({\n          name: \"index\"\n        });\n      }\n    }\n    async function play() {\n      const httpURL = \"http://localhost:1985/rtc/v1/play/\";\n      const webRTCURL = `webRTC://localhost/live/${LiveId.value}`;\n      console.log(httpURL, webRTCURL);\n      const localPc = new RTCPeerConnection();\n      const stream = new MediaStream();\n      const videoElement2 = document.querySelector(\"#video2\");\n      localPc.ontrack = event => {\n        stream.addTrack(event.track);\n        console.log(event.track);\n        videoElement2.srcObject = stream;\n      };\n      localPc.addTransceiver(\"audio\", {\n        direction: \"recvonly\"\n      });\n      localPc.addTransceiver(\"video\", {\n        direction: \"recvonly\"\n      });\n      const offer = await localPc.createOffer();\n      await localPc.setLocalDescription(offer);\n      const data = {\n        \"api\": httpURL,\n        \"streamurl\": webRTCURL,\n        \"sdp\": offer.sdp\n      };\n      httpApi(httpURL, data).then(async data => {\n        console.log(\"answer\", data);\n        await localPc.setRemoteDescription(new RTCSessionDescription({\n          type: 'answer',\n          sdp: data.sdp\n        }));\n      }).catch(data => {\n        if (data.code === 400) {\n          console.log(\"SDP交换失败\");\n        }\n      });\n    }\n    function httpApi(httpURL, data) {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', httpURL, true);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.send(JSON.stringify(data));\n        xhr.onload = () => {\n          if (xhr.readyState !== xhr.DONE) reject(xhr);\n          if (xhr.status !== 200 && xhr.status !== 201) reject(xhr);\n          const responseData = JSON.parse(xhr.responseText);\n          if (responseData.code === 0) {\n            resolve(responseData);\n          } else {\n            reject(responseData);\n          }\n        };\n      });\n    }\n    let socket;\n    const initWebSocket = () => {\n      const shopId = LiveId.value;\n      socket = new WebSocket(`ws://localhost:8888/channel/live/${shopId}`);\n      socket.onopen = () => {\n        console.log(\"WebSocket 连接已建立\");\n      };\n      socket.onmessage = event => {\n        const message = JSON.parse(event.data);\n        handleNotification(message);\n      };\n      socket.onclose = () => {\n        console.log(\"WebSocket 连接已关闭\");\n      };\n      socket.onerror = error => {\n        console.error(\"WebSocket 连接出错:\", error);\n      };\n    };\n\n    // 处理通知\n    const handleNotification = async message => {\n      if (message.message === \"updateUser\") await initOnlineUsers();else if (message.message === \"updateMessage\") await initChatMessages();\n    };\n    const onlineUsers = ref([]);\n    async function initOnlineUsers() {\n      try {\n        const response = await axios.post('/api/live/getOnlineUserList', {\n          roomId: LiveId.value\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        onlineUsers.value = response.data;\n      } catch (err) {\n        ElMessage.error(\"获取在线用户列表失败，请稍后再试\");\n      }\n    }\n    const chatMessages = ref([]);\n    async function initChatMessages() {\n      try {\n        const response = await axios.post('/api/live/getLiveMessageList', {\n          roomId: LiveId.value\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        chatMessages.value = response.data;\n      } catch (error) {\n        ElMessage.error(\"获取聊天记录失败，请稍后再试\");\n      }\n    }\n    async function insertOnlineUser() {\n      try {\n        const response = await axios.post('/api/live/insertOnlineUser', {\n          roomId: LiveId.value,\n          userId: UserInfoForm.value.id\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        if (response.data.code !== 200) ElMessage.error(\"插入在线用户失败，请稍后再试\");\n      } catch (err) {\n        ElMessage.error(\"插入在线用户失败，请稍后再试\");\n      }\n    }\n    async function deleteOnlineUser() {\n      try {\n        const response = await axios.post('/api/live/deleteOnlineUser', {\n          roomId: LiveId.value,\n          userId: UserInfoForm.value.id\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        if (response.data.code !== 200) ElMessage.error(\"删除在线用户失败，请稍后再试\");\n      } catch (err) {\n        ElMessage.error(\"删除在线用户失败，请稍后再试\");\n      }\n    }\n    async function init() {\n      await insertOnlineUser();\n      await initOnlineUsers();\n      await initChatMessages();\n    }\n    const closeWebSocket = async () => {\n      if (socket) {\n        await deleteOnlineUser();\n        socket.close();\n        socket = null; // 清空socket变量\n      }\n    };\n    onMounted(async () => {\n      loading.value = true;\n      initUserSession();\n      getLiveId();\n      if (LiveId.value !== undefined) {\n        await play();\n        initWebSocket();\n        await init();\n        loading.value = false;\n      }\n    });\n    window.addEventListener('beforeunload', closeWebSocket);\n    router.beforeEach((to, from, next) => {\n      closeWebSocket(); // 在路由跳转时关闭WebSocket连接\n      next(); // 继续导航\n    });\n    const __returned__ = {\n      UserInfoForm,\n      initUserSession,\n      LiveId,\n      loading,\n      getLiveId,\n      play,\n      httpApi,\n      get socket() {\n        return socket;\n      },\n      set socket(v) {\n        socket = v;\n      },\n      initWebSocket,\n      handleNotification,\n      onlineUsers,\n      initOnlineUsers,\n      chatMessages,\n      initChatMessages,\n      insertOnlineUser,\n      deleteOnlineUser,\n      init,\n      closeWebSocket,\n      HeaderComponent,\n      RightWidgetComponent,\n      FooterComponent,\n      get useUser() {\n        return useUser;\n      },\n      onMounted,\n      ref,\n      get router() {\n        return router;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["HeaderComponent","RightWidgetComponent","FooterComponent","useUser","onMounted","ref","router","ElMessage","axios","UserInfoForm","initUserSession","LiveId","loading","getLiveId","urlParams","URLSearchParams","window","location","search","liveId","get","value","error","push","name","play","httpURL","webRTCURL","console","log","localPc","RTCPeerConnection","stream","MediaStream","videoElement2","document","querySelector","ontrack","event","addTrack","track","srcObject","addTransceiver","direction","offer","createOffer","setLocalDescription","data","sdp","httpApi","then","setRemoteDescription","RTCSessionDescription","type","catch","code","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onload","readyState","DONE","status","responseData","parse","responseText","socket","initWebSocket","shopId","WebSocket","onopen","onmessage","message","handleNotification","onclose","onerror","initOnlineUsers","initChatMessages","onlineUsers","response","post","roomId","headers","withCredentials","err","chatMessages","insertOnlineUser","userId","id","deleteOnlineUser","init","closeWebSocket","close","undefined","addEventListener","beforeEach","to","from","next"],"sources":["D:/Cache/Java/shopping/shoppping_c_frontend/src/views/LiveView.vue"],"sourcesContent":["<template>\r\n  <div class=\"my-haichao-page\">\r\n    <HeaderComponent/>\r\n    <div class=\"live-stream-container\" v-loading=\"loading\">\r\n      <!-- 头部信息 -->\r\n      <div class=\"header bg-light d-flex align-items-center p-3 shadow-sm row\">\r\n        <div class=\"col-8\">\r\n          <img class=\"user-avatar rounded-circle\" :src=\"userAvatar\" alt=\"头像\"/>\r\n          <div class=\"ms-3\">\r\n            <h5 class=\"mb-0\">{{ userName }}</h5>\r\n            <p class=\"text-muted mb-0\">{{ userRole }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 主体内容 -->\r\n      <div class=\"content-container d-flex\">\r\n        <!-- 视频播放区 -->\r\n        <div class=\"video-section flex-grow-1\">\r\n          <video id=\"video2\" ref=\"video2\" autoplay\r\n                 style=\"width: 100%; height: 100%; object-fit: cover;\"></video>\r\n        </div>\r\n\r\n        <!-- 在线用户和聊天区域 -->\r\n        <div class=\"side-panel bg-light p-3\">\r\n          <!-- 在线用户列表 -->\r\n          <div class=\"online-users mb-4\">\r\n            <h6 class=\"text-danger\">在线人员 ({{ onlineUsers.length }})</h6>\r\n            <ul class=\"list-unstyled\">\r\n              <li\r\n                  v-for=\"(user, index) in onlineUsers\"\r\n                  :key=\"index\"\r\n                  class=\"d-flex align-items-center mb-2\"\r\n              >\r\n                <img\r\n                    class=\"user-avatar-sm rounded-circle me-2\"\r\n                    :src=\"user.avatar\"\r\n                    alt=\"用户头像\"\r\n                />\r\n                <span>{{ user.name }}</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          <!-- 聊天区 -->\r\n          <div class=\"chat-section\">\r\n            <h6 class=\"text-primary\">聊天区</h6>\r\n            <div class=\"chat-messages border rounded p-2 mb-3\">\r\n              <div\r\n                  v-for=\"(message, index) in chatMessages\"\r\n                  :key=\"index\"\r\n                  class=\"d-flex align-items-start mb-2\"\r\n              >\r\n                <img\r\n                    class=\"user-avatar-sm rounded-circle me-2\"\r\n                    :src=\"message.avatar\"\r\n                    alt=\"用户头像\"\r\n                />\r\n                <div>\r\n                  <p class=\"mb-1\"><strong>{{ message.sender }}</strong></p>\r\n                  <p class=\"text-muted mb-0\">{{ message.content }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 聊天输入框 -->\r\n            <div class=\"input-group\">\r\n              <input\r\n                  type=\"text\"\r\n                  v-model=\"chatInput\"\r\n                  class=\"form-control\"\r\n                  placeholder=\"输入50字以内聊天内容~\"\r\n                  maxlength=\"50\"\r\n              />\r\n              <button class=\"btn btn-danger\" @click=\"sendMessage\">发送</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <FooterComponent/>\r\n  <RightWidgetComponent></RightWidgetComponent>\r\n</template>\r\n\r\n<script setup>\r\nimport HeaderComponent from \"@/components/HeaderComponent.vue\";\r\nimport RightWidgetComponent from \"@/components/RightWidgetComponent.vue\";\r\nimport FooterComponent from \"@/components/FooterComponent.vue\";\r\nimport useUser from \"@/composables/useUser\";\r\nimport {onMounted, ref} from \"vue\";\r\nimport router from \"@/router\";\r\nimport {ElMessage} from \"element-plus\";\r\nimport axios from \"axios\";\r\n\r\nconst {UserInfoForm, initUserSession} = useUser()\r\n\r\nconst LiveId = ref();\r\nconst loading = ref(false);\r\n\r\nfunction getLiveId() {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const liveId = urlParams.get(\"id\");\r\n  if (liveId) {\r\n    LiveId.value = liveId;\r\n  } else {\r\n    ElMessage.error(\"直播间不存在\")\r\n    router.push({name: \"index\"});\r\n  }\r\n}\r\n\r\nasync function play() {\r\n  const httpURL = \"http://localhost:1985/rtc/v1/play/\";\r\n  const webRTCURL = `webRTC://localhost/live/${LiveId.value}`;\r\n  console.log(httpURL, webRTCURL);\r\n  const localPc = new RTCPeerConnection();\r\n  const stream = new MediaStream();\r\n  const videoElement2 = document.querySelector(\"#video2\");\r\n\r\n  localPc.ontrack = (event) => {\r\n    stream.addTrack(event.track);\r\n    console.log(event.track);\r\n    videoElement2.srcObject = stream;\r\n  };\r\n\r\n  localPc.addTransceiver(\"audio\", {direction: \"recvonly\"});\r\n  localPc.addTransceiver(\"video\", {direction: \"recvonly\"});\r\n\r\n  const offer = await localPc.createOffer();\r\n  await localPc.setLocalDescription(offer);\r\n  const data = {\r\n    \"api\": httpURL,\r\n    \"streamurl\": webRTCURL,\r\n    \"sdp\": offer.sdp\r\n  };\r\n\r\n  httpApi(httpURL, data).then(async (data) => {\r\n    console.log(\"answer\", data);\r\n    await localPc.setRemoteDescription(new RTCSessionDescription({type: 'answer', sdp: data.sdp}));\r\n  }).catch((data) => {\r\n    if (data.code === 400) {\r\n      console.log(\"SDP交换失败\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction httpApi(httpURL, data) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('POST', httpURL, true);\r\n    xhr.setRequestHeader('Content-type', 'application/json');\r\n    xhr.send(JSON.stringify(data));\r\n    xhr.onload = () => {\r\n      if (xhr.readyState !== xhr.DONE) reject(xhr);\r\n      if (xhr.status !== 200 && xhr.status !== 201) reject(xhr);\r\n      const responseData = JSON.parse(xhr.responseText);\r\n      if (responseData.code === 0) {\r\n        resolve(responseData);\r\n      } else {\r\n        reject(responseData);\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nlet socket;\r\nconst initWebSocket = () => {\r\n  const shopId = LiveId.value;\r\n  socket = new WebSocket(`ws://localhost:8888/channel/live/${shopId}`);\r\n\r\n  socket.onopen = () => {\r\n    console.log(\"WebSocket 连接已建立\");\r\n  };\r\n\r\n  socket.onmessage = (event) => {\r\n    const message = JSON.parse(event.data);\r\n    handleNotification(message);\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log(\"WebSocket 连接已关闭\");\r\n  };\r\n\r\n  socket.onerror = (error) => {\r\n    console.error(\"WebSocket 连接出错:\", error);\r\n  };\r\n};\r\n\r\n// 处理通知\r\nconst handleNotification = async (message) => {\r\n  if (message.message === \"updateUser\")\r\n    await initOnlineUsers();\r\n  else if (message.message === \"updateMessage\")\r\n    await initChatMessages();\r\n};\r\n\r\nconst onlineUsers = ref([]);\r\n\r\nasync function initOnlineUsers() {\r\n  try {\r\n    const response = await axios.post('/api/live/getOnlineUserList', {\r\n      roomId: LiveId.value,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    onlineUsers.value = response.data;\r\n  } catch (err) {\r\n    ElMessage.error(\"获取在线用户列表失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nconst chatMessages = ref([]);\r\n\r\nasync function initChatMessages() {\r\n  try {\r\n    const response = await axios.post('/api/live/getLiveMessageList', {\r\n      roomId: LiveId.value,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    chatMessages.value = response.data;\r\n  } catch (error) {\r\n    ElMessage.error(\"获取聊天记录失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nasync function insertOnlineUser() {\r\n  try {\r\n    const response = await axios.post('/api/live/insertOnlineUser', {\r\n      roomId: LiveId.value,\r\n      userId: UserInfoForm.value.id,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    if (response.data.code !== 200)\r\n      ElMessage.error(\"插入在线用户失败，请稍后再试\");\r\n  } catch (err) {\r\n    ElMessage.error(\"插入在线用户失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nasync function deleteOnlineUser() {\r\n  try {\r\n    const response = await axios.post('/api/live/deleteOnlineUser', {\r\n      roomId: LiveId.value,\r\n      userId: UserInfoForm.value.id,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    if (response.data.code !== 200)\r\n      ElMessage.error(\"删除在线用户失败，请稍后再试\");\r\n  } catch (err) {\r\n    ElMessage.error(\"删除在线用户失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nasync function init() {\r\n  await insertOnlineUser();\r\n  await initOnlineUsers();\r\n  await initChatMessages();\r\n}\r\n\r\nconst closeWebSocket = async () => {\r\n  if (socket) {\r\n    await deleteOnlineUser()\r\n    socket.close();\r\n    socket = null; // 清空socket变量\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  loading.value = true\r\n  initUserSession()\r\n  getLiveId()\r\n  if (LiveId.value !== undefined) {\r\n    await play()\r\n    initWebSocket()\r\n    await init()\r\n    loading.value = false\r\n  }\r\n})\r\n\r\nwindow.addEventListener('beforeunload', closeWebSocket);\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  closeWebSocket(); // 在路由跳转时关闭WebSocket连接\r\n  next(); // 继续导航\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.live-stream-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 80vh;\r\n  margin-top: 80px;\r\n}\r\n\r\n/* 头部信息样式 */\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.user-avatar {\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n\r\n/* 主体内容布局 */\r\n.content-container {\r\n  flex: 1;\r\n  display: flex;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 视频区域 */\r\n.video-section {\r\n  flex-grow: 1;\r\n  background: #000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* 在线用户和聊天区域 */\r\n.side-panel {\r\n  width: 300px;\r\n  border-left: 1px solid #ddd;\r\n  overflow-y: auto;\r\n}\r\n\r\n.online-users img.user-avatar-sm {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n\r\n.chat-section .chat-messages {\r\n  min-height: 50vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chat-section .input-group {\r\n  display: flex;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}