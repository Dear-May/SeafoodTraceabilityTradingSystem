{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"支付二维码\", -1 /* HOISTED */)), $setup.qrCode ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $setup.qrCode,\n    alt: \"支付二维码\"\n  }, null, 8 /* PROPS */, _hoisted_1)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"二维码生成中，请稍候...\"))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","$setup","qrCode","src","alt","_hoisted_1","_hoisted_2"],"sources":["D:\\Cache\\Java\\shopping\\shoppping_c_frontend\\src\\views\\SubmitOrderView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>支付二维码</h1>\r\n    <img v-if=\"qrCode\" :src=\"qrCode\" alt=\"支付二维码\"/>\r\n    <p v-else>二维码生成中，请稍候...</p>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {onMounted, onUnmounted, ref} from \"vue\";\r\nimport axios from \"axios\";\r\nimport {ElMessage} from \"element-plus\";\r\nimport router from \"@/router\";\r\n\r\nconst hostip = ref();\r\nconst token = ref();\r\nconst qrCode = ref(\"\"); // 二维码数据\r\nconst paymentStatus = ref(\"\"); // 支付状态\r\nlet previousStatus = \"\"; // 记录上一次的支付状态\r\nlet socket; // WebSocket 实例\r\n\r\n// 获取二维码数据\r\nconst fetchQRCode = async () => {\r\n  try {\r\n    const response = await axios.post(\"/api/pay/generate_qr\", {\r\n      orderId: token.value, // 订单号\r\n    });\r\n    qrCode.value = response.data.qrCode;\r\n  } catch (error) {\r\n    console.error(\"二维码生成失败\", error);\r\n    alert(\"生成二维码失败，请稍后重试\");\r\n  }\r\n};\r\n\r\nasync function getHostIP() {\r\n  try {\r\n    const response = await axios.get(\"/api/other/getHostIp\");\r\n    if (response.data !== null) {\r\n      hostip.value = response.data;\r\n    } else\r\n      hostip.value = \"192.168.1.20\";\r\n  } catch (error) {\r\n    ElMessage.error(\"获取服务器 IP 失败，请稍后重试\");\r\n  }\r\n}\r\n\r\n// 连接 WebSocket\r\nconst connectWebSocket = async () => {\r\n  await getHostIP();\r\n  socket = new WebSocket(\"ws://\" + hostip.value + \":8888/channel/payment/\" + token.value);\r\n\r\n  socket.onmessage = (event) => {\r\n    console.log(\"WebSocket 收到消息：\", event.data);\r\n    const message = JSON.parse(event.data);\r\n    const newStatus = message.status;\r\n\r\n    if (newStatus !== previousStatus) {\r\n      paymentStatus.value = newStatus;\r\n      previousStatus = newStatus;\r\n      handleMySpace(newStatus);\r\n    }\r\n    console.log(\"WebSocket 收到消息：\", message);\r\n  };\r\n  socket.onopen = () => {\r\n    console.log(\"WebSocket 连接已建立\");\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log(\"WebSocket 连接已关闭\");\r\n  };\r\n};\r\n\r\nasync function handleMySpace(newStatus) {\r\n  if (newStatus !== \"已扫码\") {\r\n    if (newStatus === \"已支付\") {\r\n      try {\r\n        const response = await axios.post(\"/api/pay/changOrderStatus\", {\r\n          token: token.value,\r\n          status: newStatus,\r\n        })\r\n        if (response.data.code === 200)\r\n          ElMessage.success(\"支付成功！\");\r\n        else\r\n          ElMessage.error(\"订单状态更新失败，请稍后重试\");\r\n      } catch (error) {\r\n        ElMessage.error(\"订单状态更新失败，请稍后重试\");\r\n      }\r\n    } else if (newStatus === \"未支付\") {\r\n      ElMessage.error(\"未支付订单\");\r\n    }\r\n    setTimeout(() => {\r\n      router.replace(\"/mySpace\")\r\n    }, 1500)\r\n  }\r\n}\r\n\r\n// 销毁 WebSocket 连接\r\nconst disconnectWebSocket = () => {\r\n  if (socket) {\r\n    socket.close();\r\n  }\r\n};\r\n\r\n// 生命周期管理\r\nonMounted(async () => {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  token.value = urlParams.get(\"token\");\r\n  await fetchQRCode();\r\n  await connectWebSocket();\r\n});\r\n\r\nonUnmounted(() => {\r\n  disconnectWebSocket();\r\n});\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.container {\r\n  text-align: center;\r\n  margin: 20px;\r\n}\r\n\r\n.title {\r\n  font-size: 24px;\r\n  color: #333;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.qr-image {\r\n  width: 200px;\r\n  height: 200px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.loading-text {\r\n  font-size: 18px;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":";mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAIM,c,0BAHJC,mBAAA,CAAc,YAAV,OAAK,sBACEC,MAAA,CAAAC,MAAM,I,cAAjBH,mBAAA,CAA8C;IAHlDD,GAAA;IAGwBK,GAAG,EAAEF,MAAA,CAAAC,MAAM;IAAEE,GAAG,EAAC;0BAHzCC,UAAA,M,cAIIN,mBAAA,CAA2B,KAJ/BO,UAAA,EAIc,eAAa,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}