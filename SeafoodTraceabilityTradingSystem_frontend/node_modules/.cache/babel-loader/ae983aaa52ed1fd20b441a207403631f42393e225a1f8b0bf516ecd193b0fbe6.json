{"ast":null,"code":"import { ElMessage } from 'element-plus';\nimport axios from 'axios';\nimport { ref } from 'vue';\nimport router from \"@/router\";\nexport default {\n  setup() {\n    const qrCodeUrl = ref(null); // 初始二维码 URL\n    const statusMessage = ref('请扫描二维码'); // 初始提示文字\n    const showQRCode = ref(false); // 控制显示二维码或新元素\n    const firstTime = ref(true); // 第一次加载页面\n    const isLoading = ref(false); // 控制加载动画\n\n    // 生成二维码\n    const generateQRCode = async () => {\n      ElMessage.info('正在生成二维码，请稍候');\n      isLoading.value = true; // 启动加载动画\n\n      try {\n        const response = await axios.post('/api/wx/startQRCode');\n        if (response.data.qrCodeUrl) {\n          ElMessage.success('二维码生成成功');\n          qrCodeUrl.value = response.data.qrCodeUrl;\n          statusMessage.value = '请扫描二维码';\n          showQRCode.value = true; // 显示二维码\n          firstTime.value = false; // 不是第一次加载页面\n          setTimeout(pollQRCodeStatus, 2000); // 开始轮询，等待2秒避免立即请求\n        }\n      } catch (error) {\n        ElMessage.error('生成二维码失败，请稍后重试');\n        console.error(error);\n      } finally {\n        isLoading.value = false; // 停止加载动画\n      }\n    };\n\n    // 轮询二维码状态\n    const pollQRCodeStatus = async () => {\n      try {\n        const response = await axios.post('/api/wx/pollQRCodeStatus');\n        if (response.data.status.includes('登录成功')) {\n          statusMessage.value = \"登录成功，欢迎回来！\";\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\n          const openidMatch = response.data.status.match(/openid：(.+)/);\n          let openid = null;\n          if (openidMatch && openidMatch[1]) {\n            openid = openidMatch[1].trim();\n          }\n          setTimeout(() => {\n            router.replace(\"/accessResult?id=\" + openid + \"&source=wechat\");\n          }, 1500);\n        } else if (response.data.status.includes('扫码成功')) {\n          statusMessage.value = \"扫码成功，请绑定账号\";\n          showQRCode.value = false;\n          setTimeout(() => {\n            const tokenMatch = response.data.status.match(/token：([^，]+)/);\n            if (tokenMatch && tokenMatch[1]) {\n              const token = tokenMatch[1];\n              router.replace(\"/accessLogin?token=\" + token);\n            }\n          }, 1500);\n          // 等待 2 秒，避免立即请求\n        } else if (response.data.status.includes('二维码已过期')) {\n          statusMessage.value = '二维码已过期，请重新生成';\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\n        } else if (response.data.status.includes('用户取消扫码')) {\n          statusMessage.value = '用户取消扫码，请重新生成';\n          showQRCode.value = false;\n        } else {\n          statusMessage.value = response.data.status;\n          setTimeout(pollQRCodeStatus, 2000); // 每隔 2 秒轮询一次\n        }\n      } catch (error) {\n        ElMessage.error('轮询二维码状态失败');\n        console.error(error);\n      }\n    };\n    return {\n      qrCodeUrl,\n      statusMessage,\n      generateQRCode,\n      showQRCode,\n      firstTime,\n      isLoading\n    };\n  }\n};","map":{"version":3,"names":["ElMessage","axios","ref","router","setup","qrCodeUrl","statusMessage","showQRCode","firstTime","isLoading","generateQRCode","info","value","response","post","data","success","setTimeout","pollQRCodeStatus","error","console","status","includes","openidMatch","match","openid","trim","replace","tokenMatch","token"],"sources":["D:\\Cache\\Java\\shopping\\shoppping_c_frontend\\src\\components\\WechatLoginComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"qr-container\" v-loading=\"isLoading\">\r\n    <!-- 根据状态显示二维码或新的图片 -->\r\n    <div v-if=\"showQRCode\" class=\"qr-wrapper\">\r\n      <img :src=\"qrCodeUrl\" alt=\"二维码\" class=\"qr-image\"/>\r\n      <div class=\"status-text\">{{ statusMessage }}</div>\r\n    </div>\r\n    <div v-else class=\"new-status-wrapper\">\r\n      <div v-if=\"!firstTime\">\r\n        <!-- 新的图片或提示，替换二维码 -->\r\n        <img src=\"../images/Wechatlogin.png\" alt=\"微信登录\" class=\"new-status-image\"/>\r\n        <div class=\"new-status-text\">{{ statusMessage }}</div>\r\n      </div>\r\n    </div>\r\n    <el-button @click=\"generateQRCode\" class=\"login-button\" type=\"primary\" block>生成二维码</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {ElMessage} from 'element-plus';\r\nimport axios from 'axios';\r\nimport {ref} from 'vue';\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n  setup() {\r\n    const qrCodeUrl = ref(null); // 初始二维码 URL\r\n    const statusMessage = ref('请扫描二维码'); // 初始提示文字\r\n    const showQRCode = ref(false); // 控制显示二维码或新元素\r\n    const firstTime = ref(true); // 第一次加载页面\r\n    const isLoading = ref(false); // 控制加载动画\r\n\r\n    // 生成二维码\r\n    const generateQRCode = async () => {\r\n      ElMessage.info('正在生成二维码，请稍候');\r\n      isLoading.value = true; // 启动加载动画\r\n\r\n      try {\r\n        const response = await axios.post('/api/wx/startQRCode');\r\n        if (response.data.qrCodeUrl) {\r\n          ElMessage.success('二维码生成成功');\r\n          qrCodeUrl.value = response.data.qrCodeUrl;\r\n          statusMessage.value = '请扫描二维码';\r\n          showQRCode.value = true; // 显示二维码\r\n          firstTime.value = false; // 不是第一次加载页面\r\n          setTimeout(pollQRCodeStatus, 2000); // 开始轮询，等待2秒避免立即请求\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('生成二维码失败，请稍后重试');\r\n        console.error(error);\r\n      } finally {\r\n        isLoading.value = false; // 停止加载动画\r\n      }\r\n    };\r\n\r\n    // 轮询二维码状态\r\n    const pollQRCodeStatus = async () => {\r\n      try {\r\n        const response = await axios.post('/api/wx/pollQRCodeStatus');\r\n        if (response.data.status.includes('登录成功')) {\r\n          statusMessage.value = \"登录成功，欢迎回来！\";\r\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\r\n          const openidMatch = response.data.status.match(/openid：(.+)/);\r\n          let openid = null;\r\n          if (openidMatch && openidMatch[1]) {\r\n            openid = openidMatch[1].trim();\r\n          }\r\n          setTimeout(() => {\r\n            router.replace(\"/accessResult?id=\" + openid + \"&source=wechat\");\r\n          }, 1500);\r\n        } else if (response.data.status.includes('扫码成功')) {\r\n          statusMessage.value = \"扫码成功，请绑定账号\";\r\n          showQRCode.value = false;\r\n          setTimeout(() => {\r\n            const tokenMatch = response.data.status.match(/token：([^，]+)/);\r\n            if (tokenMatch && tokenMatch[1]) {\r\n              const token = tokenMatch[1];\r\n              router.replace(\"/accessLogin?token=\" + token)\r\n            }\r\n          }, 1500);\r\n          // 等待 2 秒，避免立即请求\r\n        } else if (response.data.status.includes('二维码已过期')) {\r\n          statusMessage.value = '二维码已过期，请重新生成';\r\n          showQRCode.value = false; // 隐藏二维码，显示新的元素\r\n        } else if (response.data.status.includes('用户取消扫码')) {\r\n          statusMessage.value = '用户取消扫码，请重新生成';\r\n          showQRCode.value = false;\r\n        } else {\r\n          statusMessage.value = response.data.status;\r\n          setTimeout(pollQRCodeStatus, 2000); // 每隔 2 秒轮询一次\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('轮询二维码状态失败');\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    return {\r\n      qrCodeUrl,\r\n      statusMessage,\r\n      generateQRCode,\r\n      showQRCode,\r\n      firstTime,\r\n      isLoading,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.qr-container {\r\n  display: flex;\r\n  flex-direction: column; /* 垂直排列 */\r\n  align-items: center; /* 居中对齐 */\r\n  margin-top: 20px;\r\n}\r\n\r\n.qr-wrapper, .new-status-wrapper {\r\n  display: inline-block;\r\n  position: relative;\r\n}\r\n\r\n.qr-image, .new-status-image {\r\n  width: 200px;\r\n  height: 200px;\r\n}\r\n\r\n.status-text, .new-status-text {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: white;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.login-button {\r\n  background-color: #668B8B;\r\n  border: none;\r\n  font-size: 18px;\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}