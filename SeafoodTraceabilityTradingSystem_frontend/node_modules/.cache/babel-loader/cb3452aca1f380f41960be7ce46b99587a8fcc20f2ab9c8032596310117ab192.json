{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopSliderComponent from \"@/components/ShopSliderComponent.vue\";\nimport StoreHeaderView from \"@/components/StoreHeaderView.vue\";\nimport { ref, onMounted, nextTick } from \"vue\";\nimport \"video.js/dist/video-js.css\";\nimport { useUserShop } from \"@/composables/useShopUser\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\nimport axios from \"axios\";\nexport default {\n  __name: 'StoreLiveView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const shopSlider = ref(null);\n    const storeHeader = ref(null);\n    const {\n      shopForm,\n      initUserSession,\n      initShopInfo\n    } = useUserShop();\n    const loading = ref(false);\n    const isPublishing = ref(false); // 是否正在推流\n    const button_one = ref(null);\n    const button_two = ref(null);\n    const videoStream = ref(null);\n    const pc = ref(null);\n    let socket;\n    const initWebSocket = () => {\n      // 模拟商家端的用户 ID\n      const shopId = shopForm.value.shopID;\n      socket = new WebSocket(`ws://localhost:8888/channel/live/${shopId}`);\n      socket.onopen = () => {\n        console.log(\"WebSocket 连接已建立\");\n      };\n      socket.onmessage = event => {\n        const message = JSON.parse(event.data);\n        handleNotification(message);\n      };\n      socket.onclose = () => {\n        console.log(\"WebSocket 连接已关闭\");\n      };\n      socket.onerror = error => {\n        console.error(\"WebSocket 连接出错:\", error);\n      };\n    };\n\n    // 处理通知\n    const handleNotification = async message => {\n      if (message.message === \"updateUser\") await initOnlineUsers();else if (message.message === \"updateMessage\") await initChatMessages();\n    };\n    const onlineUsers = ref([]);\n    async function initOnlineUsers() {\n      try {\n        const response = await axios.post('/api/live/getOnlineUserList', {\n          roomId: shopForm.value.shopID\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        onlineUsers.value = response.data;\n      } catch (err) {\n        ElMessage.error(\"获取在线用户列表失败，请稍后再试\");\n      }\n    }\n    const chatMessages = ref([]);\n    const chatWindowRef = ref(null);\n    async function initChatMessages() {\n      try {\n        const response = await axios.post('/api/live/getLiveMessageList', {\n          roomId: shopForm.value.shopID\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        chatMessages.value = response.data;\n        await nextTick(() => {\n          const chatWindow = chatWindowRef.value;\n          if (chatWindow) {\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n          }\n        });\n      } catch (error) {\n        ElMessage.error(\"获取聊天记录失败，请稍后再试\");\n      }\n    }\n    async function init() {\n      await initOnlineUsers();\n      await initChatMessages();\n    }\n    async function updateLiveStatus(status) {\n      try {\n        const response = await axios.post('/api/live/updateLiveStatus', {\n          roomId: shopForm.value.shopID,\n          status: status\n        }, {\n          headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n          },\n          withCredentials: true\n        });\n        if (response.data.code === 500) ElMessage.error(\"更新直播状态失败，请稍后再试\");\n      } catch (error) {\n        ElMessage.error(\"更新直播状态失败，请稍后再试\");\n      }\n    }\n    const chatInput = ref(\"\");\n    const sendMessage = () => {\n      if (chatInput.value.trim() === \"\") return;\n      chatMessages.value.push({\n        sender: \"我\",\n        content: chatInput.value.trim(),\n        avatar: shopForm.value.shopAvatar\n      });\n      chatInput.value = \"\"; // 清空输入框\n    };\n    async function publish() {\n      if (isPublishing.value) return;\n      const httpURL = \"http://localhost:1985/rtc/v1/publish/\";\n      const webRTCURL = `webRTC://localhost/live/${shopForm.value.shopID}`;\n      try {\n        // 捕获本地视频流\n        videoStream.value = await navigator.mediaDevices.getUserMedia({\n          video: {\n            frameRate: {\n              ideal: 30\n            },\n            width: 1280,\n            height: 720\n          },\n          audio: true\n        });\n\n        // 显示本地视频流\n        const localVideo = document.querySelector(\"#video\");\n        localVideo.srcObject = videoStream.value;\n        localVideo.play();\n\n        // 创建 RTCPeerConnection\n        pc.value = new RTCPeerConnection();\n\n        // 添加轨道到 RTCPeerConnection\n        videoStream.value.getTracks().forEach(track => {\n          pc.value.addTrack(track, videoStream.value);\n        });\n\n        // 创建 SDP offer\n        const offer = await pc.value.createOffer();\n        await pc.value.setLocalDescription(offer);\n        const data = {\n          api: httpURL,\n          streamurl: webRTCURL,\n          sdp: offer.sdp\n        };\n\n        // 与 SRS 信令交互\n        const response = await httpApi(httpURL, data);\n        await pc.value.setRemoteDescription(new RTCSessionDescription({\n          type: \"answer\",\n          sdp: response.sdp\n        }));\n        isPublishing.value = true;\n        ElMessage.success(\"开始直播\");\n        await updateLiveStatus(\"open\");\n      } catch (error) {\n        ElMessage.error(\"推流失败，请稍后再试\");\n      }\n    }\n    async function close() {\n      if (!isPublishing.value) return;\n      if (pc.value) {\n        pc.value.close();\n        pc.value = null;\n      }\n      videoStream.value.getTracks().forEach(track => track.stop());\n      isPublishing.value = false;\n      await updateLiveStatus(\"close\");\n      ElMessage.success(\"停止直播\");\n    }\n    function httpApi(httpURL, data) {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", httpURL, true);\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\n        xhr.send(JSON.stringify(data));\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            resolve(JSON.parse(xhr.responseText));\n          } else {\n            reject(JSON.parse(xhr.responseText));\n          }\n        };\n      });\n    }\n    const closeWebSocket = () => {\n      if (socket) {\n        socket.close();\n        socket = null; // 清空socket变量\n      }\n    };\n    onMounted(async () => {\n      loading.value = true;\n      initUserSession();\n      await initShopInfo();\n      shopSlider.value.setActiveIndex(\"6-1\");\n      storeHeader.value.setTitle(\"直播间\");\n      loading.value = false;\n      initWebSocket();\n      await init();\n    });\n    window.addEventListener('beforeunload', closeWebSocket);\n    router.beforeEach((to, from, next) => {\n      closeWebSocket(); // 在路由跳转时关闭WebSocket连接\n      next(); // 继续导航\n    });\n    const __returned__ = {\n      shopSlider,\n      storeHeader,\n      shopForm,\n      initUserSession,\n      initShopInfo,\n      loading,\n      isPublishing,\n      button_one,\n      button_two,\n      videoStream,\n      pc,\n      get socket() {\n        return socket;\n      },\n      set socket(v) {\n        socket = v;\n      },\n      initWebSocket,\n      handleNotification,\n      onlineUsers,\n      initOnlineUsers,\n      chatMessages,\n      chatWindowRef,\n      initChatMessages,\n      init,\n      updateLiveStatus,\n      chatInput,\n      sendMessage,\n      publish,\n      close,\n      httpApi,\n      closeWebSocket,\n      ShopSliderComponent,\n      StoreHeaderView,\n      ref,\n      onMounted,\n      nextTick,\n      get useUserShop() {\n        return useUserShop;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get router() {\n        return router;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ShopSliderComponent","StoreHeaderView","ref","onMounted","nextTick","useUserShop","ElMessage","router","axios","shopSlider","storeHeader","shopForm","initUserSession","initShopInfo","loading","isPublishing","button_one","button_two","videoStream","pc","socket","initWebSocket","shopId","value","shopID","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","handleNotification","onclose","onerror","error","initOnlineUsers","initChatMessages","onlineUsers","response","post","roomId","headers","withCredentials","err","chatMessages","chatWindowRef","chatWindow","scrollTop","scrollHeight","init","updateLiveStatus","status","code","chatInput","sendMessage","trim","push","sender","content","avatar","shopAvatar","publish","httpURL","webRTCURL","navigator","mediaDevices","getUserMedia","video","frameRate","ideal","width","height","audio","localVideo","document","querySelector","srcObject","play","RTCPeerConnection","getTracks","forEach","track","addTrack","offer","createOffer","setLocalDescription","api","streamurl","sdp","httpApi","setRemoteDescription","RTCSessionDescription","type","success","close","stop","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","send","stringify","onload","responseText","closeWebSocket","setActiveIndex","setTitle","window","addEventListener","beforeEach","to","from","next"],"sources":["D:/Cache/Java/shopping/shoppping_c_frontend/src/views/Store/StoreLiveView.vue"],"sourcesContent":["<template>\r\n  <div class=\"d-flex\" style=\"height: 100vh; overflow: hidden;\">\r\n    <ShopSliderComponent ref=\"shopSlider\"></ShopSliderComponent>\r\n    <div class=\"flex-grow-1 overflow-auto\" style=\"background: #f5f7fa;\">\r\n      <StoreHeaderView ref=\"storeHeader\"></StoreHeaderView>\r\n\r\n      <div class=\"p-4\" v-loading=\"loading\">\r\n        <div class=\"live-stream-container\">\r\n          <!-- 头部信息 -->\r\n          <div class=\"header bg-light d-flex align-items-center p-3 shadow-sm row\">\r\n            <div class=\"col-8\">\r\n              <el-button\r\n                  ref=\"button_one\"\r\n                  @click=\"publish\"\r\n                  type=\"primary\"\r\n                  size=\"large\"\r\n                  :disabled=\"isPublishing\"\r\n              >\r\n                开始直播\r\n              </el-button>\r\n              <el-button\r\n                  ref=\"button_two\"\r\n                  @click=\"close\"\r\n                  type=\"danger\"\r\n                  size=\"large\"\r\n                  :disabled=\"!isPublishing\"\r\n              >\r\n                停止直播\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 主体内容 -->\r\n          <div class=\"content-container d-flex\">\r\n            <!-- 视频播放区 -->\r\n            <div class=\"video-section flex-grow-1\">\r\n              <video id=\"video\" autoplay playsinline muted class=\"video-element\"\r\n                     style=\"width: 100%; height: 100%; object-fit: cover;\"></video>\r\n            </div>\r\n\r\n            <!-- 在线用户和聊天区域 -->\r\n            <div class=\"side-panel bg-light p-3\">\r\n              <!-- 在线用户列表 -->\r\n              <div class=\"online-users mb-4\">\r\n                <h6 class=\"text-danger\">在线人员 ({{ onlineUsers.length }})</h6>\r\n                <ul class=\"list-unstyled\">\r\n                  <li\r\n                      v-for=\"(user, index) in onlineUsers\"\r\n                      :key=\"index\"\r\n                      class=\"d-flex align-items-center mb-2\"\r\n                  >\r\n                    <img\r\n                        class=\"user-avatar-sm rounded-circle me-2\"\r\n                        :src=\"user.avatar\"\r\n                        alt=\"用户头像\"\r\n                    />\r\n                    <span>{{ user.name }}</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <!-- 聊天区 -->\r\n              <div class=\"chat-section\">\r\n                <h6 class=\"text-primary\">聊天区</h6>\r\n                <div class=\"chat-messages border rounded p-2 mb-3\" ref=\"chatWindow\">\r\n                  <div\r\n                      v-for=\"(message, index) in chatMessages\"\r\n                      :key=\"index\"\r\n                      class=\"d-flex align-items-start mb-2\"\r\n                  >\r\n                    <img\r\n                        class=\"user-avatar-sm rounded-circle me-2\"\r\n                        :src=\"message.avatar\"\r\n                        alt=\"用户头像\"\r\n                    />\r\n                    <div>\r\n                      <p class=\"mb-1\"><strong>{{ message.sender }}</strong></p>\r\n                      <p class=\"text-muted mb-0\">{{ message.content }}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- 聊天输入框 -->\r\n                <div class=\"input-group\">\r\n                  <input\r\n                      type=\"text\"\r\n                      v-model=\"chatInput\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"输入50字以内聊天内容~\"\r\n                      maxlength=\"50\"\r\n                  />\r\n                  <button class=\"btn btn-danger\" @click=\"sendMessage\">发送</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport ShopSliderComponent from \"@/components/ShopSliderComponent.vue\";\r\nimport StoreHeaderView from \"@/components/StoreHeaderView.vue\";\r\nimport {ref, onMounted, nextTick} from \"vue\";\r\nimport \"video.js/dist/video-js.css\";\r\nimport {useUserShop} from \"@/composables/useShopUser\";\r\nimport {ElMessage} from \"element-plus\";\r\nimport router from \"@/router\";\r\nimport axios from \"axios\";\r\n\r\nconst shopSlider = ref(null);\r\nconst storeHeader = ref(null);\r\nconst {shopForm, initUserSession, initShopInfo} = useUserShop();\r\nconst loading = ref(false);\r\nconst isPublishing = ref(false); // 是否正在推流\r\nconst button_one = ref(null);\r\nconst button_two = ref(null);\r\n\r\nconst videoStream = ref(null);\r\nconst pc = ref(null);\r\n\r\nlet socket;\r\nconst initWebSocket = () => {\r\n// 模拟商家端的用户 ID\r\n  const shopId = shopForm.value.shopID;\r\n  socket = new WebSocket(`ws://localhost:8888/channel/live/${shopId}`);\r\n\r\n  socket.onopen = () => {\r\n    console.log(\"WebSocket 连接已建立\");\r\n  };\r\n\r\n  socket.onmessage = (event) => {\r\n    const message = JSON.parse(event.data);\r\n    handleNotification(message);\r\n  };\r\n\r\n  socket.onclose = () => {\r\n    console.log(\"WebSocket 连接已关闭\");\r\n  };\r\n\r\n  socket.onerror = (error) => {\r\n    console.error(\"WebSocket 连接出错:\", error);\r\n  };\r\n};\r\n\r\n// 处理通知\r\nconst handleNotification = async (message) => {\r\n  if (message.message === \"updateUser\")\r\n    await initOnlineUsers();\r\n  else if (message.message === \"updateMessage\")\r\n    await initChatMessages();\r\n};\r\n\r\nconst onlineUsers = ref([]);\r\n\r\nasync function initOnlineUsers() {\r\n  try {\r\n    const response = await axios.post('/api/live/getOnlineUserList', {\r\n      roomId: shopForm.value.shopID,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    onlineUsers.value = response.data;\r\n  } catch (err) {\r\n    ElMessage.error(\"获取在线用户列表失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nconst chatMessages = ref([]);\r\nconst chatWindowRef = ref(null);\r\n\r\nasync function initChatMessages() {\r\n  try {\r\n    const response = await axios.post('/api/live/getLiveMessageList', {\r\n      roomId: shopForm.value.shopID,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    });\r\n    chatMessages.value = response.data;\r\n    await nextTick(() => {\r\n      const chatWindow = chatWindowRef.value;\r\n      if (chatWindow) {\r\n        chatWindow.scrollTop = chatWindow.scrollHeight;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    ElMessage.error(\"获取聊天记录失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nasync function init() {\r\n  await initOnlineUsers();\r\n  await initChatMessages();\r\n}\r\n\r\nasync function updateLiveStatus(status) {\r\n  try {\r\n    const response = await axios.post('/api/live/updateLiveStatus', {\r\n      roomId: shopForm.value.shopID,\r\n      status: status,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n      },\r\n      withCredentials: true,\r\n    })\r\n    if (response.data.code === 500)\r\n      ElMessage.error(\"更新直播状态失败，请稍后再试\")\r\n  } catch (error) {\r\n    ElMessage.error(\"更新直播状态失败，请稍后再试\")\r\n  }\r\n}\r\n\r\nconst chatInput = ref(\"\");\r\n\r\nconst sendMessage = () => {\r\n  if (chatInput.value.trim() === \"\") return;\r\n  chatMessages.value.push({\r\n    sender: \"我\",\r\n    content: chatInput.value.trim(),\r\n    avatar: shopForm.value.shopAvatar,\r\n  });\r\n  chatInput.value = \"\"; // 清空输入框\r\n};\r\n\r\nasync function publish() {\r\n  if (isPublishing.value) return;\r\n\r\n  const httpURL = \"http://localhost:1985/rtc/v1/publish/\";\r\n  const webRTCURL = `webRTC://localhost/live/${shopForm.value.shopID}`;\r\n\r\n  try {\r\n    // 捕获本地视频流\r\n    videoStream.value = await navigator.mediaDevices.getUserMedia({\r\n      video: {frameRate: {ideal: 30}, width: 1280, height: 720},\r\n      audio: true,\r\n    });\r\n\r\n    // 显示本地视频流\r\n    const localVideo = document.querySelector(\"#video\");\r\n    localVideo.srcObject = videoStream.value;\r\n    localVideo.play();\r\n\r\n    // 创建 RTCPeerConnection\r\n    pc.value = new RTCPeerConnection();\r\n\r\n    // 添加轨道到 RTCPeerConnection\r\n    videoStream.value.getTracks().forEach((track) => {\r\n      pc.value.addTrack(track, videoStream.value);\r\n    });\r\n\r\n    // 创建 SDP offer\r\n    const offer = await pc.value.createOffer();\r\n    await pc.value.setLocalDescription(offer);\r\n\r\n    const data = {\r\n      api: httpURL,\r\n      streamurl: webRTCURL,\r\n      sdp: offer.sdp,\r\n    };\r\n\r\n    // 与 SRS 信令交互\r\n    const response = await httpApi(httpURL, data);\r\n\r\n    await pc.value.setRemoteDescription(\r\n        new RTCSessionDescription({type: \"answer\", sdp: response.sdp})\r\n    );\r\n    isPublishing.value = true;\r\n    ElMessage.success(\"开始直播\");\r\n    await updateLiveStatus(\"open\");\r\n  } catch (error) {\r\n    ElMessage.error(\"推流失败，请稍后再试\");\r\n  }\r\n}\r\n\r\nasync function close() {\r\n  if (!isPublishing.value) return;\r\n\r\n  if (pc.value) {\r\n    pc.value.close();\r\n    pc.value = null;\r\n  }\r\n\r\n  videoStream.value.getTracks().forEach((track) => track.stop());\r\n  isPublishing.value = false;\r\n  await updateLiveStatus(\"close\");\r\n  ElMessage.success(\"停止直播\");\r\n}\r\n\r\nfunction httpApi(httpURL, data) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", httpURL, true);\r\n    xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n    xhr.send(JSON.stringify(data));\r\n    xhr.onload = () => {\r\n      if (xhr.status >= 200 && xhr.status < 300) {\r\n        resolve(JSON.parse(xhr.responseText));\r\n      } else {\r\n        reject(JSON.parse(xhr.responseText));\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nconst closeWebSocket = () => {\r\n  if (socket) {\r\n    socket.close();\r\n    socket = null; // 清空socket变量\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  loading.value = true;\r\n  initUserSession();\r\n  await initShopInfo();\r\n  shopSlider.value.setActiveIndex(\"6-1\");\r\n  storeHeader.value.setTitle(\"直播间\");\r\n  loading.value = false;\r\n  initWebSocket();\r\n  await init();\r\n});\r\n\r\nwindow.addEventListener('beforeunload', closeWebSocket);\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  closeWebSocket(); // 在路由跳转时关闭WebSocket连接\r\n  next(); // 继续导航\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.live-stream-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 80vh;\r\n}\r\n\r\n/* 头部信息样式 */\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.user-avatar {\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n\r\n/* 主体内容布局 */\r\n.content-container {\r\n  flex: 1;\r\n  display: flex;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 视频区域 */\r\n.video-section {\r\n  flex-grow: 1;\r\n  background: #000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* 在线用户和聊天区域 */\r\n.side-panel {\r\n  width: 300px;\r\n  border-left: 1px solid #ddd;\r\n  overflow-y: auto;\r\n}\r\n\r\n.online-users img.user-avatar-sm {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n\r\n.chat-section .chat-messages {\r\n  min-height: 44vh;\r\n  max-height: 44vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chat-section .input-group {\r\n  display: flex;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}